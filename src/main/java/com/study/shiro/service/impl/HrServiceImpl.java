package com.study.shiro.service.impl;

import com.study.shiro.domain.*;
import com.study.shiro.entity.Hr;
import com.study.shiro.entity.HrExample;
import com.study.shiro.entity.HrRole;
import com.study.shiro.entity.MenuRole;
import com.study.shiro.service.*;
import com.study.shiro.dao.HrDao;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
/**
*  generated by AddClassPlugin plugin
*/

@Service
public class HrServiceImpl implements HrService {

    @Resource
    private HrDao hrDao;

    @Resource
    private HrRoleService hrRoleService;

    @Resource
    private MenuRoleService menuRoleService;

    @Resource
    private MenuService menuService;

    @Resource
    private RoleService roleService;

    @Override
    public void addHr(HrDto hrDto) {
        Hr hr = dtoToEntity(hrDto);
        hrDao.insert(hr);
    }

    @Override
    public void updateByHrSearch(HrDto hrDto, HrSearch hrSearch) {

    }

    @Override
    public HrDto findById(Integer id) {
        Hr hr = hrDao.selectByPrimaryKey(id);
        return hr == null ? null : entityToDto(hr);
    }

    @Override
    public List<HrDto> searchByHrSearch(HrSearch hrSearch) {
        List<HrDto> hrDtos = new ArrayList<>();
        if(hrSearch != null){
            HrExample hrExample = getSearchExample(hrSearch);

            hrExample.setOrderByClause(hrSearch.getOrderByClause());
            List<Hr> hrs = hrDao.selectByExample(hrExample);
            hrs.forEach(hr -> hrDtos.add(entityToDto(hr)));
        }
        return hrDtos;
    }

    @Override
    public Long count(HrSearch hrSearch) {
        HrExample hrExample = getSearchExample(hrSearch);
        return hrDao.countByExample(hrExample);
    }

    /**
    * 查询条件设置
    * @param hrSearch
    * @return
    */
    private HrExample getSearchExample(HrSearch hrSearch){
        HrExample hrExample = new HrExample();
        HrExample.Criteria criteria = hrExample.createCriteria();
        if(hrSearch ==null){
            return hrExample;
        }
        if(StringUtils.isNotEmpty(hrSearch.getUsername())){
            criteria.andUsernameEqualTo(hrSearch.getUsername());
        }
        return hrExample;
    }

    @Override
    public HrDto findByName(String username) {
        HrSearch hrSearch = new HrSearch();
        hrSearch.setUsername(username);
        List<HrDto> hrDtoList = searchByHrSearch(hrSearch);
        if(!hrDtoList.isEmpty()){
            HrDto hrDto = hrDtoList.get(0);
            HrRoleSearch hrRoleSearch = new HrRoleSearch();
            hrRoleSearch.setHrId(hrDto.getId());
            List<HrRoleDto> hrRoleDtoList = hrRoleService.searchByHrRoleSearch(hrRoleSearch);
            List<Integer> roleIds = hrRoleDtoList.stream().map(HrRole::getRid).distinct().collect(Collectors.toList());
            if(!roleIds.isEmpty()){
                RoleSearch roleSearch = new RoleSearch();
                roleSearch.setIds(roleIds);
                List<RoleDto> roleDtos = roleService.searchByRoleSearch(roleSearch);
                hrDto.setRoleList(roleDtos);
                MenuRoleSearch menuRoleSearch = new MenuRoleSearch();
                menuRoleSearch.setRoleIds(roleIds);
                List<MenuRoleDto> menuRoleDtos = menuRoleService.searchByMenuRoleSearch(menuRoleSearch);
                List<Integer> menuIds = menuRoleDtos.stream().map(MenuRole::getMid).distinct().collect(Collectors.toList());
                if(!menuIds.isEmpty()){
                    MenuSearch menuSearch = new MenuSearch();
                    menuSearch.setIds(menuIds);
                    List<MenuDto> menuDtos = menuService.searchByMenuSearch(menuSearch);
                    hrDto.setMenuDtoList(menuDtos);
                }
            }
            return hrDto;
        }
        return null;
    }

    /**
    * entity to dto
    * @param hr
    * @return
    */
    private HrDto entityToDto(Hr hr){
        HrDto hrDto = new HrDto();
        BeanUtils.copyProperties(hr, hrDto);
        return hrDto;
    }

    /**
    * dto to entity
    * @param hrDto
    * @return
    */
    private Hr dtoToEntity(HrDto hrDto){
        Hr hr = new Hr();
        BeanUtils.copyProperties(hrDto, hr);
        return hr;
    }

}